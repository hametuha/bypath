<?php

namespace Hametuha\ByPath;


use Hametuha\ByPath;
use Hametuha\ByPath\Pattern\ApiBase;
use Hametuha\ByPath\PostType\Client;
use Hametuha\ByPath\PostType\UserToken;

/**
 * Login route
 *
 * @package bypath
 */
class Login extends ApiBase {

	/**
	 * Route name.
	 *
	 * @var string
	 */
	protected $route = 'login';

	/**
	 * Get arguments.
	 *
	 * @param string $http_method GET, PUT, POST, DELETE.
	 *
	 * @return array
	 */
	protected function get_args( $http_method ) {
		return [
			'user_login' => [
				'required'          => true,
				'description'       => __( 'Login name or email.', 'bypath' ),
				'validate_callback' => [ $this, 'is_not_empty' ],
			],
			'user_pass'  => [
				'required'          => true,
				'description'       => __( 'User password.', 'bypath' ),
				'validate_callback' => [ $this, 'is_not_empty' ],
			],
			'client_key' => [
				'required'          => true,
				'description'       => __( 'Client key generated by ByPath.', 'bypath' ),
				'validate_callback' => function ( $var ) {
					$secret = Client::secret( $var );
					if ( $secret ) {
						return true;
					} else {
						return new \WP_Error( __( 'Invalid client.', 'bypath' ) );
					}
				},
			],
			'token' => [
				'required' => true,
				'description'       => __( 'A SHA256-hashed string which is connection of user_login, user_pass and client secret.', 'bypath' ),
				'validate_callback' => function( $var, \WP_REST_Request $request ) {
					return $this->check_general_hash( $request );
				},
			],
		];
	}

	/**
	 * Handle post request.
	 *
	 * @param \WP_REST_Request $request Request object.
	 *
	 * @return array|\stdClass|\WP_Error
	 */
	public function handle_post( $request ) {
		// User exists?
		$user = wp_authenticate( $request->get_param( 'user_login' ), $request->get_param( 'user_pass' ) );
		if ( is_wp_error( $user ) ) {
			$user->add_data( [
				'status' => 403,
			] );
			return $user;
		}
		// O.K.
		$token = UserToken::get_token( $request->get_param( 'client_key' ), $user->ID, true );
		if ( is_wp_error( $token ) ) {
			return $token;
		}
		// We got a token!
		return [
			'success' => true,
			'token'   => $token,
			'message' => __( 'Login success.', 'bypath' ),
		];
	}

}
